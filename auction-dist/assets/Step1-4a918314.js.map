{"version":3,"file":"Step1-4a918314.js","sources":["../../src/views/admin/AuctionPreparation/Step1.vue"],"sourcesContent":["<template>\r\n    <div class=\"wizard-content\">\r\n        <div class=\"wc-item\">\r\n            <div class=\"wc-header\">\r\n                <div class=\"wc-title\" v-if=\"getLastInsertedAuctionId==null\">Step 1 Details</div>\r\n                <div class=\"wc-title\" v-else>Auction Id: {{getLastInsertedAuctionId}}</div>\r\n            </div>\r\n\r\n            <div class=\"form-grid\">\r\n                <div class=\"col-span-full md:col-span-6\" v-if=\"ifBool(config?.auctionTypeDataVisible, true)\">\r\n                    <div class=\"fm-group required\">\r\n                        <label class=\"fm-label\" for=\"step1\">\r\n                            Auction Type\r\n                        </label>\r\n                        <!-- {{ $v.auctionTypeData.auctionType }} -->\r\n                        <div class=\"fm-inner\">\r\n                            <Dropdown :disabled=\"config?.auctionTypeDataReadonly\" v-model=\"auctionTypeData\" variant=\"filled\" :options=\"aucType\" optionLabel=\"auctionType\" placeholder=\"Select Auction Type\"/>\r\n                        </div>\r\n                        <div v-if=\"$v.auctionTypeData.auctionType.$error\" class=\"fm-error\">\r\n                            {{ $v.auctionTypeData.auctionType.$errors[0].$message }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-span-full md:col-span-6\" v-if=\"ifBool(config?.auctionMethodDataVisible, true)\">\r\n                    <div class=\"fm-group required\">\r\n                        <label class=\"fm-label\" for=\"step2\">\r\n                            Auction Method\r\n                        </label>\r\n                        <!-- {{ $v.auctionMethodData.auctionMethodName }} -->\r\n                        <div class=\"fm-inner\">\r\n                            <Dropdown :disabled=\"config?.auctionMethodDataReadonly\" v-model=\"auctionMethodData\" variant=\"filled\" :options=\"aucMethod\" optionLabel=\"auctionMethodName\" placeholder=\"Select Auction Method\" />\r\n                        </div>\r\n                        <div v-if=\"$v.auctionMethodData.auctionMethodName.$error\" class=\"fm-error\">\r\n                            {{ $v.auctionMethodData.auctionMethodName.$errors[0].$message }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- <div v-if=\"ifBool(config?.auctionTypeDataVisible, true)\" class=\"w-1/2\">\r\n                    <div class=\"fm-group\">\r\n                        <label for=\"step1\">Auction Type<span class=\"text-danger\">*</span></label>\r\n                        <Dropdown :disabled=\"config?.auctionTypeDataReadonly\" v-model=\"auctionTypeData\" variant=\"filled\"\r\n                            :options=\"aucType\" optionLabel=\"auctionType\" placeholder=\"Select Auction Type\"\r\n                            class=\"w-full md:w-14rem\" />\r\n                        <span v-if=\"$v.auctionTypeData.auctionType.$error\" class=\"text-red-500\">{{\r\n                            $v.auctionTypeData.auctionType.$errors[0].$message }}</span>\r\n                    </div>\r\n                </div>\r\n                <div v-if=\"ifBool(config?.auctionMethodDataVisible, true)\" class=\"w-1/2\">\r\n                    <div class=\"fm-group\">\r\n                        <label for=\"step2\">Auction Method<span class=\"text-danger\">*</span></label>\r\n                        <Dropdown :disabled=\"config?.auctionMethodDataReadonly\" v-model=\"auctionMethodData\" variant=\"filled\"\r\n                            :options=\"aucMethod\" optionLabel=\"auctionMethodName\" placeholder=\"Select Auction Method\"\r\n                            class=\"w-full md:w-14rem\" />\r\n                        <span v-if=\"$v.auctionMethodData.auctionMethodName.$error\" class=\"text-red-500\">{{\r\n                            $v.auctionMethodData.auctionMethodName.$errors[0].$message }}</span>\r\n                    </div>\r\n                </div> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"wc-action\">\r\n            <Button class=\"btn-submit\" label=\"Save\" @click=\"InsertAuctionTypeAndMethod\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from \"vue\";\r\nimport MQL from '@/plugins/mql.js';\r\nimport Divider from 'primevue/divider';\r\nimport Button from 'primevue/button';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { helpers, required } from '@vuelidate/validators'\r\nimport { createToaster } from \"@meforma/vue-toaster\";\r\nimport { fetchAuctionStatus, ifBool } from \"../../../plugins/helpers\";\r\nconst toaster = createToaster({ position: \"top-right\", duration: 3000 })\r\n\r\nimport { login } from \"../../../store/modules/login\";\r\nimport { useAuctionPreparation } from \"../../../store/auctionPreparation\";\r\nimport { storeToRefs } from 'pinia';\r\n\r\n\r\nconst loginStore = login();\r\nconst {organizationId, entityId, loginId } = storeToRefs(loginStore);\r\n\r\nconst AuctionStore = useAuctionPreparation();\r\nconst { getLastInsertedAuctionId } = storeToRefs(AuctionStore);\r\n\r\n// access the `store` variable anywhere in the component \r\nconst auctionMethodData = ref({\r\n    auctionMethodName: '',\r\n    auctionMethodId: 0\r\n});\r\n\r\nconst { config, auctionId } = defineProps({\r\n    config: {\r\n        type: Object,\r\n        default: null\r\n    },\r\n    auctionId: {\r\n        type: Number,\r\n        default: null\r\n    }\r\n})\r\n\r\nconst aucMethod = ref([]);\r\nconst statusData = ref([]);\r\nconst displayName = ref();\r\nconst statusId = ref();\r\nconst aucType = ref([]);\r\nconst auctionTypeData = ref({\r\n    auctionType: '',\r\n    auctionTypeId: 0\r\n});\r\nconst lastInsertedId = ref('');\r\n\r\nconst emit = defineEmits({\r\n    // No validation\r\n    click: null,\r\n\r\n    // Validate submit event\r\n    submit: ({ lastInsertedId }) => {\r\n        if (lastInsertedId) {\r\n            return true\r\n        } else {\r\n            console.warn('Invalid submit event payload!')\r\n            return false\r\n        }\r\n    },\r\n    nextTab: null\r\n})\r\n\r\n\r\n\r\n// Fetch Auction Types from Auction Master\r\nfunction FetchAuctionTypes() {\r\n    new MQL()\r\n        .useCoreServer()\r\n        .setActivity('o.[FetchAllAuctionTypes]')\r\n        .setData()\r\n        .fetch()\r\n        .then((rs) => {\r\n            let res = rs.getActivity('FetchAllAuctionTypes', true);\r\n            if (rs.isValid('FetchAllAuctionTypes')) {\r\n                console.log(\"Auction Type Data\", res.result);\r\n                aucType.value = res.result;\r\n            } else {\r\n                rs.showErrorToast('ErrorFetchAllAuctionTypes');\r\n            }\r\n        });\r\n}\r\n\r\n// Fetch Auction Methods from Method Master\r\nfunction FetchAuctionMethods() {\r\n    new MQL()\r\n        .useCoreServer()\r\n        .setActivity('o.[FetchAllAuctionMethods]')\r\n        .setData()\r\n        .fetch()\r\n        .then((rs) => {\r\n            let res = rs.getActivity('FetchAllAuctionMethods', true);\r\n            if (rs.isValid('FetchAllAuctionMethods')) {\r\n                console.log(\"Auction Method Data\", res.result);\r\n                aucMethod.value = res.result;\r\n            } else {\r\n                rs.showErrorToast('ErrorFetchAllAuctionMethods');\r\n            }\r\n        });\r\n}\r\n\r\n\r\n// Fetch Auction Status from Status Master\r\nasync function FetchAuctionStatus() {\r\n    // new MQL()\r\n    //     .useCoreServer()\r\n    //     .setActivity('o.[fetchStatusFromStatusMaster]')\r\n    //     .setData({ statusCode: 'AUCTION_DRAFTED' })\r\n    //     .fetch()\r\n    //     .then((rs) => {\r\n    //         let res = rs.getActivity('fetchStatusFromStatusMaster', true);\r\n    //         if (rs.isValid('fetchStatusFromStatusMaster')) {\r\n    //             console.log(\"Auction Status Data\", res.result);\r\n    //             statusData.value = res.result;\r\n    //             statusData.value.forEach(item => {\r\n    //                 statusId.value = item.statusId;\r\n    //                 displayName.value = item.displayName;\r\n    //             });\r\n    //             console.log(\"Auction Status Data\", statusData.value);\r\n    //         } else {\r\n    //             rs.showErrorToast('fetchStatusFromStatusMaster');\r\n    //         }\r\n    //     });\r\n        const statusResult = await fetchAuctionStatus('AUCTION_DRAFTED')\r\n            if (statusResult.error == null) {\r\n                statusId.value = statusResult.result.statusId\r\n                displayName.value = statusResult.result.displayName\r\n            } else {\r\n                toaster.error(\"Oops! Please Contact\")\r\n            }\r\n}\r\n\r\n// Insert Auction Type and Method step 1 details \r\nconst InsertAuctionTypeAndMethod = async () => {\r\n    const result = await $v.value.$validate();\r\n    if (!result) {\r\n        toaster.error('Form Invalid')\r\n        return\r\n    } else {\r\n        if (auctionId == null && result) {\r\n            insertAuction();\r\n        } else {\r\n            updateAuction();\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateAuction() {\r\n    new MQL()\r\n        .useManagementServer()\r\n        .setActivity(\"o.[UpdateStep1Details]\")\r\n        .setData({ auctionTypeId: auctionTypeData.value.auctionTypeId, auctionMethodId: auctionMethodData.value.auctionMethodId, statusId: statusId.value, auctionId: auctionId, modifiedByUserId: loginId.value })\r\n        .fetch()\r\n        .then(rs => {\r\n            let res = rs.getActivity(\"UpdateStep1Details\", true);\r\n            if (rs.isValid(\"UpdateStep1Details\")) {\r\n                // lastInsertedId.value = res.result.objectId; \r\n                // emit('submit');\r\n                emit('nextTab');\r\n                console.log(\"UpdateStep1Details\", res.result);\r\n            } else {\r\n                rs.showErrorToast(\"UpdateStep1Details\");\r\n            }\r\n        });\r\n}\r\n\r\nfunction insertAuction() {\r\n    console.log(\"OrganizationId, entityId, loginId\", organizationId.value, entityId.value, loginId.value);    \r\n    new MQL()\r\n        .useManagementServer()\r\n        .setActivity('o.[InsertAuctionTypeAndAuctionMethod]')\r\n        .setData({ auctionTypeId: auctionTypeData.value.auctionTypeId, \r\n            auctionMethodId: auctionMethodData.value.auctionMethodId,\r\n             statusId: statusId.value, \r\n             organizationId: organizationId.value,\r\n             entityId: entityId.value, createdByUserId: loginId.value})\r\n        .fetch()\r\n        .then((rs) => {\r\n            let res = rs.getActivity('InsertAuctionTypeAndAuctionMethod', true);\r\n            if (rs.isValid('InsertAuctionTypeAndAuctionMethod')) {\r\n                console.log(\"LastInsertedId from response\", res.result);\r\n                lastInsertedId.value = res.result.auctionId;\r\n                console.log(\"LastInsertedId from lastInsertedId variable\", lastInsertedId.value);\r\n                emit('submit', lastInsertedId.value);\r\n                emit('nextTab')\r\n            } else {\r\n                rs.showErrorToast('InsertAuctionTypeAndAuctionMethod');\r\n            }\r\n        });\r\n}\r\n\r\n// Fetch All Steps 1 Auction Preview\r\nfunction FetchAllStepsAuctionPreview() {\r\n    new MQL()\r\n        .useManagementServer()\r\n        .setActivity(\"o.[FetchAllStepsAuctionPreview]\")\r\n        .setData({ \"auctionId\": auctionId })\r\n        .fetch()\r\n        .then(rs => {\r\n            let res = rs.getActivity(\"FetchAllStepsAuctionPreview\", true)\r\n            if (rs.isValid(\"FetchAllStepsAuctionPreview\")) {\r\n                console.log(\"FetchAllStepsAuctionPreview\", res.result);\r\n                auctionMethodData.value.auctionMethodName = res.result.fetchStep1AuctionPreview.auctionMethodName;\r\n                auctionMethodData.value.auctionMethodId = `${res.result.fetchStep1AuctionPreview.auctionMethodId}`;\r\n                auctionTypeData.value.auctionType = res.result.fetchStep1AuctionPreview.auctionType;\r\n                auctionTypeData.value.auctionTypeId = `${res.result.fetchStep1AuctionPreview.auctionTypeId}`;\r\n\r\n            } else {\r\n                rs.showErrorToast(\"FetchAllStepsAuctionPreview\")\r\n            }\r\n        })\r\n}\r\n\r\n\r\n// Vuelidate Rules  \r\nconst rules = computed(() => ({\r\n    auctionTypeData: {\r\n        auctionTypeId: { required: helpers.withMessage('Please Select Auction Type ID', required) },\r\n        auctionType: { required: helpers.withMessage('Please Select Auction Type', required) }\r\n    },\r\n    auctionMethodData: {\r\n        auctionMethodId: { required: helpers.withMessage('Please Select Auction Method ID', required) },\r\n        auctionMethodName: { required: helpers.withMessage('Please Select Auction Method', required) }\r\n    },\r\n\r\n}));\r\n\r\n// Vuelidate \r\nconst $v = useVuelidate(rules, { auctionMethodData, auctionTypeData });\r\n\r\n\r\n\r\n//rest of the properties & methods are public\r\n// defineExpose({\r\n//     InsertAuctionTypeAndMethod,\r\n//     FetchAuctionTypes,\r\n//     FetchAuctionMethods,\r\n//     FetchAuctionStatus,\r\n//     FetchAllStepsAuctionPreview,\r\n//     lastInsertedId,\r\n//     auctionMethodData,\r\n//     aucMethod,\r\n//     statusData,\r\n//     displayName,\r\n//     statusId,\r\n//     aucType,\r\n//     auctionTypeData,\r\n// });\r\n\r\n// Fetch Auction Types, Methods, Status and All Steps 1 Auction Preview on Mounted\r\nonMounted(() => {\r\n    FetchAuctionTypes();\r\n    FetchAuctionMethods();\r\n    FetchAllStepsAuctionPreview();\r\n    FetchAuctionStatus()\r\n\r\n});\r\n\r\n</script>\r\n\r\n"],"names":["toaster","createToaster","position","duration","loginStore","login","organizationId","entityId","loginId","storeToRefs","AuctionStore","useAuctionPreparation","getLastInsertedAuctionId","auctionMethodData","ref","auctionMethodName","auctionMethodId","config","auctionId","__props","aucMethod","displayName","statusId","aucType","auctionTypeData","auctionType","auctionTypeId","lastInsertedId","emit","__emit","InsertAuctionTypeAndMethod","async","result","$v","value","$validate","console","log","MQL","useManagementServer","setActivity","setData","createdByUserId","fetch","then","rs","res","getActivity","isValid","showErrorToast","modifiedByUserId","error","rules","computed","required","helpers","withMessage","useVuelidate","onMounted","useCoreServer","fetchStep1AuctionPreview","statusResult","fetchAuctionStatus","FetchAuctionStatus"],"mappings":"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"}