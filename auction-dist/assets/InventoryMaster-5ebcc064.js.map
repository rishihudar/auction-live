{"version":3,"file":"InventoryMaster-5ebcc064.js","sources":["../../src/views/InventoryMaster.vue"],"sourcesContent":["<template>\r\n  <div id=\"inventoryMaster\">\r\n    <h2 class=\"text-xl font-bold flex gap-2 items-center\">\r\n      <i\r\n        class=\"isax isax-bold-arrow-left-2 cursor-pointer\"\r\n        @click=\"$router.go(-1)\"\r\n      ></i>\r\n      Inventory Master\r\n    </h2>\r\n\r\n    <form></form>\r\n\r\n    <!-- Category Dropdown -->\r\n    <Dropdown\r\n      v-model=\"selectedCategory\"\r\n      :options=\"inventoryCategories\"\r\n      placeholder=\"Select Category\"\r\n      class=\"w-full md:w-14rem\"\r\n      optionLabel=\"propertyCategoryName\"\r\n      optionValue=\"propertyCategoryId\"\r\n      @change=\"fetchInventoryTempColumns\"\r\n    ></Dropdown>\r\n\r\n    <a\r\n      v-if=\"['2', '3', '4', '7'].includes(selectedCategory)\"\r\n      :href=\"`https://testcdncs.mkcl.org/22Jbn9juCuMfJ4fNA1Sp8AAVERE/InventoryTemplates/InventoryTemp.xlsx`\"\r\n      download\r\n      ><br />\r\n      <Button label=\"DOWNLOAD TEMPLATE HERE\" link\r\n    /></a>\r\n    <a\r\n      v-if=\"['1', '5', '6', '8'].includes(selectedCategory)\"\r\n      :href=\"`https://testcdncs.mkcl.org/22Jbn9juCuMfJ4fNA1Sp8AAVERE/InventoryTemplates/InventoryTemp_Booth_VacantLand_Industrial.xlsx`\"\r\n      download\r\n      ><br />\r\n      <Button label=\"DOWNLOAD TEMPLATE HERE\" link\r\n    /></a>\r\n\r\n    <FileUpload\r\n      name=\"excelFile\"\r\n      label=\"Choose Excel File\"\r\n      accept=\".xlsx,\"\r\n      v-if=\"selectedCategory\"\r\n      v-model=\"isFileSelected\"\r\n      mode=\"basic\"\r\n      :auto=\"true\"\r\n      :custom-upload=\"true\"\r\n      @uploader=\"onChange\"\r\n    ></FileUpload>\r\n    <br />\r\n\r\n    <Button label=\"Upload\" v-if=\"isFileSelected\" @click=\"handleUpload\">\r\n      Upload\r\n    </Button>\r\n\r\n    <DataTable :value=\"sheet\" tableStyle=\"min-width: 50rem\">\r\n      <Column\r\n        v-for=\"col of transformedColumns\"\r\n        :key=\"col.field\"\r\n        :field=\"col.field\"\r\n        :header=\"col.field\"\r\n      >\r\n      </Column>\r\n    </DataTable>\r\n\r\n    <!-- Upload Inventory Templates CDN  -->\r\n    <!-- <FileUpload \r\n    v-model=\"fileUploadTemp\" \r\n    mode=\"basic\" \r\n    name=\"fileUploadTemp\" \r\n    :auto=\"true\" \r\n    :custom-upload=\"true\"\r\n     @uploader=\"cdnProfileUpload\" \r\n     class=\"w-full md:w-14rem\"\r\n     /> -->\r\n  </div>\r\n</template>\r\n<script setup>\r\nimport { ref, onBeforeMount, computed } from \"vue\";\r\nimport Dropdown from \"primevue/dropdown\";\r\nimport FileUpload from \"primevue/fileupload\";\r\nimport * as XLSX from \"xlsx\";\r\nimport MQL from \"@/plugins/mql.js\";\r\nimport Button from \"primevue/button\";\r\nimport DataTable from \"primevue/datatable\";\r\nimport Column from \"primevue/column\";\r\nimport axios from \"axios\";\r\nimport MQLCdn from \"@/plugins/mqlCdn.js\";\r\n\r\nconst inventoryCategories = ref();\r\nconst selectedCategory = ref();\r\nconst isFileSelected = ref(false);\r\n\r\nfunction fetchInventonryCategories() {\r\n  new MQL()\r\n    .setActivity(\"o.[FetchInventoryCategories]\")\r\n    .fetch()\r\n    .then((rs) => {\r\n      let res = rs.getActivity(\"FetchInventoryCategories\", true);\r\n      if (rs.isValid(\"FetchInventoryCategories\")) {\r\n        console.log(\"fetchInventonryCategories result\", res.result);\r\n        inventoryCategories.value = res.result;\r\n        console.log(\"Inventory Categories\", inventoryCategories.value);\r\n      } else {\r\n        rs.showErrorToast(\"FetchInventoryCategories\");\r\n      }\r\n    });\r\n}\r\nonBeforeMount(() => {\r\n  fetchInventonryCategories();\r\n});\r\n\r\nconst sheet = ref();\r\nconst file = ref();\r\nconst columns = ref();\r\nconst transformedColumns = ref();\r\nconst myFile = ref();\r\n\r\nfunction onChange(event) {\r\n  isFileSelected.value = true;\r\n  myFile.value = event.files[0];\r\n  console.log(event.files[0]);\r\n  sheet.value = null;\r\n  // errortemp = false\r\n  file.value = event.files ? myFile.value : null;\r\n  if (file.value) {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      /* Parse data */\r\n      const bstr = e.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      console.log(wb, \"NewWorkBook\");\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const workSheetDataArray = XLSX.utils.sheet_to_json(ws, { header: 1 });\r\n      console.log(\"WorksheetData in Array Format\", workSheetDataArray);\r\n      const workSheetDataJson = XLSX.utils.sheet_to_json(ws, { header: 0 });\r\n      // console.log('WorksheeetData in Json Key:Value Format', workSheetDataJson)\r\n      sheet.value = workSheetDataJson;\r\n      columns.value = workSheetDataArray[0];\r\n\r\n      /* Validation of Column Names from Sheet Matches the Column Names of Selected Category\r\n      if they match the excel template is valid and then using the map function to transform each element in the array, \r\n      cNames represents each element (column name) in the original array (columns)\r\n      Return an object with the 'field' property set to the current column name. \r\n      else throws alert Invalid Template  */\r\n\r\n      var arraysMatch = columns.value.every((item) =>\r\n        columnTempNames.value.includes(item)\r\n      );\r\n      console.log(\"columns.value\",columns.value)\r\n      console.log(\"ColumnTempNames.value\",columnTempNames.value)\r\n      if (arraysMatch) {\r\n        console.log(\"The arrays match.\");\r\n        transformedColumns.value = columns.value.map((cNames) => {\r\n          return { field: cNames };\r\n          //console.log('transformedColumns',transformedColumns.value)\r\n        });\r\n      } else {\r\n        console.log(\"The arrays do not match.\");\r\n        alert(\"Invalid Template\");\r\n        window.location.reload();\r\n      }\r\n    };\r\n    reader.readAsBinaryString(file.value);\r\n  }\r\n}\r\n\r\nfunction handleUpload() {\r\n  const formData = new FormData();\r\n  formData.append(\"myFile\", myFile.value); // Assuming you only allow one file to be uploaded\r\n  formData.append(\"categoryId\", selectedCategory.value);\r\n  formData.append(\"organizationId\", 1);\r\n  formData.append(\"entityId\", 2);\r\n  axios\r\n    .post(\"http://localhost:8000/upload\", formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    })\r\n    .then((response) => {\r\n      // Handle successful upload response\r\n      console.log(response.data);\r\n      alert(response.data);\r\n      window.location.reload();\r\n    })\r\n    .catch((error) => {\r\n      // Handle upload error\r\n      console.error(\"Error uploading file:\", error);\r\n    });\r\n}\r\n\r\nconst fileUploadTemp = ref();\r\nfunction cdnProfileUpload(event) {\r\n  let formData = new FormData();\r\n  // console.log(event.files[0])\r\n  formData.append(\"file\", event.files[0]); // append your file as 'file' in formdata.\r\n  new MQLCdn()\r\n    .enablePageLoader(true)\r\n    // FIXED: change this to directory path\r\n    .setDirectoryPath(\"/InventoryTemplates\") // (optional field) if you want to save  file to specific directory path\r\n    .setFormData(formData) // (required) sets file data\r\n    .setFileName(\"InventoryTemp_Booth_VacantLand_Industrial\") // (optional field) if you want to set name to file that is being uploaded\r\n    // FIXED: pass buckeyKey instead of name\r\n    .setBucketKey(\"22Jbn9juCuMfJ4fNA1Sp8AAVERE\") // (required) valid bucket key need to set in which file will be uploaded.\r\n    .setPurposeId(\"1TxY9TS4uzp8Ivyo0eKPpo1g2Og\") // (required) valid purposeId need to set in which file will be uploaded.\r\n    .setClientId(\"1TxY9TS4uzp8Ivyo0eKPpo1g2Og\") // (required) valid purposeId need to set in which file will be uploaded.\r\n    .uploadFile(\"uploadtBtn\")\r\n    .then((res) => {\r\n      // (required) this will upload file takes element id (optional param) which will be blocked while file upload..\r\n      if (res.isValid()) {\r\n        // returns uploaded file url..\r\n        // console.log(\"Uploaded File URL\", res.uploadedFileURL())\r\n        toaster.success(\"file uploaded.\");\r\n      } else {\r\n        res.showErrorToast();\r\n      }\r\n    });\r\n}\r\n\r\nconst columnTempNames = ref();\r\nfunction fetchInventoryTempColumns() {\r\n  new MQL()\r\n    .setActivity(\"o.[FetchInventoryTemplateColumns]\")\r\n    .setData({ inventoryCategoryId: selectedCategory.value })\r\n    .fetch()\r\n    .then((rs) => {\r\n      let res = rs.getActivity(\"FetchInventoryTemplateColumns\", true);\r\n      if (rs.isValid(\"FetchInventoryTemplateColumns\")) {\r\n        console.log(\"FetchInventoryTemplateColumns\", res.result);\r\n        columnTempNames.value = res.result[0].columnNames;\r\n      } else {\r\n        rs.showErrorToast(\"FetchInventoryTemplateColumns\");\r\n      }\r\n    });\r\n}\r\n</script>\r\n"],"names":["inventoryCategories","ref","selectedCategory","isFileSelected","onBeforeMount","MQL","setActivity","fetch","then","rs","res","getActivity","isValid","console","log","result","value","showErrorToast","sheet","file","columns","transformedColumns","myFile","onChange","event","files","reader","FileReader","onload","e","bstr","target","wb","XLSX.read","type","wsname","SheetNames","ws","Sheets","workSheetDataArray","XLSX.utils","sheet_to_json","header","workSheetDataJson","arraysMatch","every","item","columnTempNames","includes","map","cNames","field","alert","window","location","reload","readAsBinaryString","handleUpload","formData","FormData","append","axios","post","headers","response","data","catch","error","fetchInventoryTempColumns","setData","inventoryCategoryId","columnNames"],"mappings":"+eAyFA,MAAMA,EAAsBC,IACtBC,EAAmBD,IACnBE,EAAiBF,GAAI,GAiB3BG,GAAc,MAdR,IAAAC,GACDC,YAAY,gCACZC,QACAC,MAAMC,IACL,IAAIC,EAAMD,EAAGE,YAAY,4BAA4B,GACjDF,EAAGG,QAAQ,6BACLC,QAAAC,IAAI,mCAAoCJ,EAAIK,QACpDf,EAAoBgB,MAAQN,EAAIK,OACxBF,QAAAC,IAAI,uBAAwBd,EAAoBgB,QAExDP,EAAGQ,eAAe,2BACnB,OAOP,MAAMC,EAAQjB,IACRkB,EAAOlB,IACPmB,EAAUnB,IACVoB,EAAqBpB,IACrBqB,EAASrB,IAEf,SAASsB,EAASC,GAOhB,GANArB,EAAea,OAAQ,EAChBM,EAAAN,MAAQQ,EAAMC,MAAM,GAC3BZ,QAAQC,IAAIU,EAAMC,MAAM,IACxBP,EAAMF,MAAQ,KAEdG,EAAKH,MAAQQ,EAAMC,MAAQH,EAAON,MAAQ,KACtCG,EAAKH,MAAO,CACR,MAAAU,EAAS,IAAIC,WACZD,EAAAE,OAAUC,IAET,MAAAC,EAAOD,EAAEE,OAAOhB,OAChBiB,EAAKC,EAAUH,EAAM,CAAEI,KAAM,WAC3BrB,QAAAC,IAAIkB,EAAI,eAEV,MAAAG,EAASH,EAAGI,WAAW,GACvBC,EAAKL,EAAGM,OAAOH,GAEfI,EAAqBC,EAAWC,cAAcJ,EAAI,CAAEK,OAAQ,IAC1D7B,QAAAC,IAAI,gCAAiCyB,GAC7C,MAAMI,EAAoBH,EAAWC,cAAcJ,EAAI,CAAEK,OAAQ,IAEjExB,EAAMF,MAAQ2B,EACNvB,EAAAJ,MAAQuB,EAAmB,GAQ/B,IAAAK,EAAcxB,EAAQJ,MAAM6B,OAAOC,GACrCC,EAAgB/B,MAAMgC,SAASF,KAEzBjC,QAAAC,IAAI,gBAAgBM,EAAQJ,OAC5BH,QAAAC,IAAI,wBAAwBiC,EAAgB/B,OAChD4B,GACF/B,QAAQC,IAAI,qBACZO,EAAmBL,MAAQI,EAAQJ,MAAMiC,KAAKC,IACrC,CAAEC,MAAOD,QAIlBrC,QAAQC,IAAI,4BACZsC,MAAM,oBACNC,OAAOC,SAASC,SACjB,EAEI7B,EAAA8B,mBAAmBrC,EAAKH,MAChC,CACH,CAEA,SAASyC,IACD,MAAAC,EAAW,IAAIC,SACZD,EAAAE,OAAO,SAAUtC,EAAON,OACxB0C,EAAAE,OAAO,aAAc1D,EAAiBc,OACtC0C,EAAAE,OAAO,iBAAkB,GACzBF,EAAAE,OAAO,WAAY,GAEzBC,EAAAC,KAAK,+BAAgCJ,EAAU,CAC9CK,QAAS,CACP,eAAgB,yBAGnBvD,MAAMwD,IAEGnD,QAAAC,IAAIkD,EAASC,MACrBb,MAAMY,EAASC,MACfZ,OAAOC,SAASC,YAEjBW,OAAOC,IAEEtD,QAAAsD,MAAM,wBAAyBA,EAAK,GAElD,CAE6BlE,IA4B7B,MAAM8C,EAAkB9C,IACxB,SAASmE,KACP,IAAI/D,GACDC,YAAY,qCACZ+D,QAAQ,CAAEC,oBAAqBpE,EAAiBc,QAChDT,QACAC,MAAMC,IACL,IAAIC,EAAMD,EAAGE,YAAY,iCAAiC,GACtDF,EAAGG,QAAQ,kCACLC,QAAAC,IAAI,gCAAiCJ,EAAIK,QACjDgC,EAAgB/B,MAAQN,EAAIK,OAAO,GAAGwD,aAEtC9D,EAAGQ,eAAe,gCACnB,GAEP"}