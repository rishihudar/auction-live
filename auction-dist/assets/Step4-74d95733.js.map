{"version":3,"file":"Step4-74d95733.js","sources":["../../src/views/admin/AuctionPreparation/Step4.vue"],"sourcesContent":["<template>\r\n  <div class=\"wizard-content\">\r\n    <div class=\"wc-item\">\r\n      <div class=\"wc-header\">\r\n        <div class=\"wc-title\">Auction ID: {{ auctionId }}</div>\r\n      </div>\r\n\r\n      <div class=\"form-grid\">\r\n        <div class=\"col-span-full md:col-span-6\">\r\n          <div class=\"fm-group\">\r\n            <label class=\"fm-label\" for=\"calendar-12h\">\r\n              Processing Fee And EMD payment Start Date\r\n            </label>\r\n            <div class=\"fm-inner\">\r\n              <Calendar\r\n                :disabled=\"config?.selectedStartDateReadonly\"\r\n                id=\"calendar-24h\"\r\n                v-model=\"selectedStartDate\"\r\n                showTime\r\n                hourFormat=\"24\"\r\n                :minDate=\"minDate\"\r\n                :showIcon=\"true\"\r\n              />\r\n            </div>\r\n            <div\r\n              v-if=\"\r\n                moment(selectedEndDate).isSameOrBefore(\r\n                  selectedStartDate,\r\n                  'minute'\r\n                )\r\n              \"\r\n              class=\"col-span-full fm-error\"\r\n            >\r\n              Start Date should not be equal or after End Date !\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-span-full md:col-span-6\">\r\n          <div class=\"fm-group\">\r\n            <label class=\"fm-label\" for=\"calendar-12h\">\r\n              Processing Fee And EMD payment End Date\r\n            </label>\r\n            <div class=\"fm-inner\">\r\n              <Calendar\r\n                :disabled=\"config?.selectedEndDateReadonly\"\r\n                id=\"calendar\"\r\n                v-model=\"selectedEndDate\"\r\n                showTime\r\n                hourFormat=\"24\"\r\n                :minDate=\"endMinDate\"\r\n                :showIcon=\"true\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-span-full 2xl:col-span-6\">\r\n          <div class=\"fm-group\">\r\n            <label class=\"fm-label\"> Auction Document </label>\r\n            <div class=\"fm-inner\">\r\n              <FileUpload\r\n                :disabled=\"config?.docNameReadonly\"\r\n                v-model=\"docName\"\r\n                :accept=\"docType\"\r\n                :multiple=\"false\"\r\n                :max-file-size=\"docSize * 1000\"\r\n                :custom-upload=\"true\"\r\n                @uploader=\"onAdvancedUpload($event, AuctionDocTypeId)\"\r\n              >\r\n                <template #empty>\r\n                  <p>\r\n                    Drag and drop files here to upload, Max. file size is 500\r\n                    KB, Only {{ docType }} are allowed !\r\n                  </p>\r\n                </template>\r\n              </FileUpload>\r\n              <span v-if=\"$v.AucUrl.$error\" class=\"text-red-500\">{{\r\n                $v.AucUrl.$errors[0].$message\r\n              }}</span>\r\n\r\n              <div v-if=\"AucUrl\">\r\n                <Button\r\n                  label=\"Download Auction Document\"\r\n                  @click=\"DownloadDocument(AucUrl)\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-span-full 2xl:col-span-6\">\r\n          <div class=\"fm-group\">\r\n            <label class=\"fm-label\"> Notice Document </label>\r\n            <div class=\"fm-inner\">\r\n              <FileUpload\r\n                :disabled=\"config?.NoticeDocNameReadonly\"\r\n                v-model=\"NoticeDocName\"\r\n                :accept=\"NoticeDocType\"\r\n                :multiple=\"false\"\r\n                :max-file-size=\"NoticeDocSize * 1000\"\r\n                :custom-upload=\"true\"\r\n                @uploader=\"onAdvancedUpload($event, NoticeDocTypeId)\"\r\n              >\r\n                <template #empty>\r\n                  <p>\r\n                    Drag and drop files here to upload, Max. file size is 500\r\n                    KB, Only {{ docType }} are allowed !\r\n                  </p>\r\n                </template>\r\n              </FileUpload>\r\n              <span v-if=\"$v.NoticeUrl.$error\" class=\"text-red-500\">{{\r\n                $v.NoticeUrl.$errors[0].$message\r\n              }}</span>\r\n\r\n              <div v-if=\"NoticeUrl\">\r\n                <Button\r\n                  label=\"Download Notice Document\"\r\n                  @click=\"DownloadDocument(NoticeUrl)\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"main-date\">\r\n                <label for=\"calendar-12h\" class=\"font-bold block mb-2\">\r\n                Processing Fee And EMD payment Start Date:</label>\r\n                <Calendar :disabled=\"config?.selectedStartDateReadonly\" id=\"calendar-24h\" v-model=\"selectedStartDate\" showTime hourFormat=\"24\" :minDate=\"minDate\"\r\n                :showIcon=\"true\" />\r\n                <label for=\"calendar-12h\" class=\"font-bold block mb-2\">\r\n                Processing Fee And EMD payment End Date:</label>\r\n                <Calendar :disabled=\"config?.selectedEndDateReadonly\" id=\"calendar\" v-model=\"selectedEndDate\" showTime hourFormat=\"24\" :minDate=\"endMinDate\" :showIcon=\"true\" />\r\n            </div>\r\n            <div v-if=\"moment(selectedEndDate).isSameOrBefore(selectedStartDate, 'minute')\" style=\"color: red;\">\r\n                Start Date should not be equal or after End Date !\r\n            </div>-->\r\n\r\n      <!-- <p>Auction Document:</p>\r\n                <FileUpload :disabled=\"config?.docNameReadonly\" v-model=\"docName\" :accept=\"docType\" :multiple=\"false\" :max-file-size=\"docSize * 1000\"\r\n                :custom-upload=\"true\" @uploader=\"onAdvancedUpload($event, NoticeDocTypeId)\">\r\n                <template #empty>\r\n                    <p>\r\n                    Drag and drop files here to upload, Max. file size is 500 KB, Only\r\n                    {{ docType }}\r\n                    are allowed !\r\n                    </p>\r\n                </template>\r\n                </FileUpload>\r\n                <p>Notice Document:</p>\r\n                <FileUpload :disabled=\"config?.NoticeDocNameReadonly\" v-model=\"NoticeDocName\" :accept=\"NoticeDocType\" :multiple=\"false\" :max-file-size=\"NoticeDocSize * 1000\"\r\n                :custom-upload=\"true\" @uploader=\"onAdvancedUpload($event, AuctionDocTypeId)\">\r\n                <template #empty>\r\n                    <p>\r\n                    Drag and drop files here to upload, Max. file size is 500 KB, Only {{ docType }}  are allowed !\r\n                    </p>\r\n                </template>\r\n                </FileUpload> -->\r\n    </div>\r\n\r\n    <div class=\"wc-action\">\r\n      <!-- <Button label=\"Back\" @click=\"backToStep3\" /> -->\r\n      <Button label=\"Back\" @click=\"prevCallback()\" severity=\"secondary\" />\r\n      <Button label=\"Save\" @click=\"onSave\" class=\"btn-submit\" />\r\n      <!-- <Button label=\"Next\" @click=\"auctionPreview\" /> -->\r\n      <!-- <Button label=\"Next\" @click=\"nextCallback()\" /> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onBeforeMount, defineProps, computed } from \"vue\";\r\nimport moment from \"moment\";\r\nimport Calendar from \"primevue/calendar\";\r\nimport FileUpload from \"primevue/fileupload\";\r\nimport Button from \"primevue/button\";\r\nimport MQLCdn from \"@/plugins/MQLCdn.js\";\r\nimport MQL from \"@/plugins/mql.js\";\r\nimport { fetchAuctionStatus } from \"../../../plugins/helpers\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { useAuctionPreparation } from \"../../../store/auctionPreparation\";\r\nimport { login } from \"../../../store/modules/login\";\r\nimport { createToaster } from \"@meforma/vue-toaster\";\r\nconst toaster = createToaster({ position: \"top-right\", duration: 5000 });\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { helpers, required } from \"@vuelidate/validators\";\r\nimport { useToast } from 'primevue/usetoast';\r\n\r\nconst toast = useToast();\r\nconst router = useRouter();\r\nconst loginStore = login();\r\nconst AuctionStore = useAuctionPreparation();\r\n\r\nconst { auctionId, config } = defineProps({\r\n  auctionId: {\r\n    type: Number,\r\n    default: null,\r\n  },\r\n  config: {\r\n    type: Object,\r\n    default: null,\r\n  },\r\n});\r\n\r\nconst serverDate = ref();\r\n//const startDate = ref(new Date());\r\n//const endDate = ref(new Date());\r\nconst selectedStartDate = ref();\r\nconst selectedEndDate = ref();\r\nconst Vue = window.app;\r\nconst minDate = ref();\r\nminDate.value = moment().add(1, \"minutes\").toDate();\r\nconst endMinDate = ref();\r\nendMinDate.value = moment().add(2, \"minutes\").toDate();\r\nconst AucUrl = ref();\r\nconst NoticeUrl = ref();\r\nconst myFile = ref();\r\nconst docValidation = ref([]);\r\nconst docName = ref();\r\nconst docType = ref();\r\nconst docSize = ref();\r\nconst NoticeDocName = ref();\r\nconst NoticeDocType = ref();\r\nconst NoticeDocSize = ref();\r\nconst dbEndDate = ref();\r\nconst dbStartDate = ref();\r\nconst docTypeId = ref();\r\nconst NoticeDocTypeId = ref();\r\nconst AuctionDocTypeId = ref();\r\nconst documentsArray = ref([]);\r\nconst formattedStartDate = ref();\r\nconst formattedEndDate = ref();\r\nconst fileName = ref();\r\nconst filePath = ref();\r\nconst fullPath = ref();\r\n\r\nconst rules = computed(() => ({\r\n  AucUrl: { required: helpers.withMessage(\"Document is required\", required) },\r\n  NoticeUrl: {\r\n    required: helpers.withMessage(\"Document is required\", required),\r\n  },\r\n}));\r\nconst $v = useVuelidate(rules, { AucUrl, NoticeUrl });\r\nconst emit = defineEmits({\r\n  nextTab: null,\r\n  previousTab: null,\r\n});\r\nfunction prevCallback() {\r\n  emit(\"previousTab\");\r\n}\r\n\r\nfunction nextCallback() {\r\n  emit(\"nextTab\");\r\n}\r\n\r\nfunction formattedStartDateCalc() {\r\n  formattedStartDate.value = moment(serverDate.value)\r\n    .add(60, \"seconds\")\r\n    .format(\"YYYY/MM/DD HH:mm:ss\");\r\n  console.log(\"formattedStartDate.value\", formattedStartDate.value);\r\n}\r\nfunction formattedEndDateCalc() {\r\n  formattedEndDate.value = moment(serverDate.value)\r\n    .add(120, \"seconds\")\r\n    .format(\"YYYY/MM/DD HH:mm:ss\");\r\n  console.log(\"formattedEndDate.value\", formattedEndDate.value);\r\n}\r\n\r\nfunction showSuccessToast (){\r\n  toast.add({\r\n    severity: 'success',\r\n    summary: 'Success',\r\n    detail: 'Your operation was successful!',\r\n    life: 3000 // Optional: Display time in milliseconds\r\n  });\r\n};\r\n\r\nfunction showErrorToast (){\r\n  toast.add({\r\n    severity: 'error',\r\n    summary: 'Error',\r\n    detail: 'An error occurred.',\r\n    life: 5000 // Optional: Display time in milliseconds\r\n  });\r\n};\r\n\r\n\r\nconst onAdvancedUpload = async (event, id) => {\r\n  // try {\r\n  console.log(event, \"event\");\r\n  let timeStamp = Date.now();\r\n  console.log(timeStamp, \"timeStamp\");\r\n  console.log(\"event\", event.files[0]);\r\n  myFile.value = event.files[0].name;\r\n  console.log(\"myFile\", myFile.value);\r\n  const formData = new FormData();\r\n  formData.append(\"file\", event.files[0]);\r\n  //new mqlCDN add-------------------------------------------------------------------------------\r\n  new MQLCdn()\r\n    // .useManagementServer()\r\n    .enablePageLoader(true) // FIXED: change this to directory path\r\n    // .isPrivateBucket(true) // (optional field) if you want to upload file to private bucket\r\n    .setDirectoryPath(auctionId + \"/AuctionPreparation/Publishing\") // (optional field) if you want to save  file to specific directory path\r\n    .setFormData(formData) // (required) sets file data\r\n    .setFileName(timeStamp + \"_\" + myFile.value) // (optional field) if you want to set name to file that is being uploaded\r\n    // FIXED: pass buckeyKey instead of name\r\n    .setBucketKey(\"2ciy8jTCjhcc6Ohu2hGHyY16nHn\") // (required) valid bucket key need to set in which file will be uploaded.\r\n    .setPurposeId(\"2cixqU1nhJHru2m1S0uIxdKSgMb\") // (required) valid purposeId need to set in which file will be uploaded.\r\n    .setClientId(\"2cixqU1nhJHru2m1S0uIxdKSgMb\") // (required) valid purposeId need to set in which file will be uploaded.\r\n\r\n    .uploadFile(\"uploadtBtn\")\r\n    .then((res) => {\r\n      // (required) this will upload file takes element id (optional param) which will be blocked while file upload..\r\n      if (res.isValid()) {\r\n        fileName.value = timeStamp + \"_\" + myFile.value;\r\n        filePath.value = res.uploadedFileURL().filePath;\r\n        fullPath.value = Vue.getCDNBaseURL();\r\n        console.log(\"fileName\", fileName.value);\r\n        console.log(\"filePath\", filePath.value);\r\n        console.log(\"fullPath\", fullPath.value);\r\n        if (id == 8) {\r\n          AucUrl.value = filePath.value;\r\n          console.log(\"AucUrl\", AucUrl.value);\r\n        } else {\r\n          NoticeUrl.value =filePath.value;\r\n          console.log(\"NoticeUrl\", NoticeUrl.value);\r\n        }\r\n\r\n        documentsArray.value.push({\r\n          fileName: timeStamp + \"_\" + myFile.value,\r\n          filePath: res.uploadedFileURL().filePath,\r\n          fullPath:\r\n            res.uploadedFileURL().cdnServer +\"/\"+ res.uploadedFileURL().filePath,\r\n          documentTypeId: id,\r\n        });\r\n        docTypeId.value = id;\r\n        console.log(\"id-\", docTypeId.value);\r\n        if (id == 8) {\r\n          docName.value = true;\r\n        } else {\r\n          NoticeDocName.value = true;\r\n        }\r\n        // emits('childEvent', { fileName: fileName.value, filePath: filePath.value,fullPath: fullPath.value});\r\n        //toaster.success(\"file uploaded.\");\r\n        // uploadedFiles.value.push(uploadedFile);\r\n\r\n        //console.log(\"uploadedFiles\", uploadedFiles.value);\r\n        toaster.success(\"File Uploaded !!!\");\r\n        // cropVisible.value=false\r\n      } else {\r\n        res.showErrorToast();\r\n      }\r\n    });\r\n};\r\n\r\nfunction fetchDocumentsValidationDetails() {\r\n  // Automatically generated\r\n  new MQL()\r\n    .useCoreServer()\r\n    .setActivity(\"o.[fetchDocumentsValidationDetails]\")\r\n\r\n    .fetch()\r\n    .then((rs) => {\r\n      let res = rs.getActivity(\"fetchDocumentsValidationDetails\", true);\r\n      docValidation.value = res.result.validation;\r\n      docValidation.value.forEach((item) => {\r\n        if (item.typeName == \"AUCTION_DOCUMENT\") {\r\n          docName.value = item.typeName;\r\n          docSize.value = item.fileSize;\r\n          docType.value = item.fileType;\r\n          AuctionDocTypeId.value = item.typeId;\r\n          console.log(\"docName.value\", docName.value);\r\n          console.log(\"AuctionDocTypeId.value\", AuctionDocTypeId.value);\r\n        } else if (item.typeName == \"NOTICE_DOCUMENT\") {\r\n          NoticeDocName.value = item.typeName;\r\n          NoticeDocSize.value = item.fileSize;\r\n          NoticeDocType.value = item.fileType;\r\n          NoticeDocTypeId.value = item.typeId;\r\n          console.log(\"docName.value\", NoticeDocName.value);\r\n          console.log(\"NoticeDocTypeId.value\", NoticeDocTypeId.value);\r\n        }\r\n      });\r\n      if (rs.isValid(\"fetchDocumentsValidationDetails\")) {\r\n      } else {\r\n        rs.showErrorToast(\"fetchDocumentsValidationDetails\");\r\n      }\r\n    });\r\n}\r\n\r\nfunction fetchAllStepsAuctionPreview() {\r\n  // Automatically generated\r\n  new MQL()\r\n    .useManagementServer()\r\n    .setActivity(\"o.[FetchAllStepsAuctionPreview]\")\r\n    .setData({ auctionId: auctionId })\r\n    .fetch()\r\n    .then((rs) => {\r\n      let res = rs.getActivity(\"FetchAllStepsAuctionPreview\", true);\r\n      //console.log(\"dbStartDate.value\", dbStartDate.value, \"dbEndDate.value\", dbEndDate.value);\r\n      if (\r\n        res.result.fetchStep4AuctionPreview.length == 0 ||\r\n        res.result.fetchStep4AuctionPreview[0].startDate == null ||\r\n        res.result.fetchStep4AuctionPreview[0].endDate == null\r\n      ) {\r\n        selectedStartDate.value = formattedStartDate.value;\r\n        selectedEndDate.value = formattedEndDate.value;\r\n        console.log(\"formattedStartDate.value\", formattedStartDate.value);\r\n      } else {\r\n        dbStartDate.value = res.result.fetchStep4AuctionPreview[0].startDate;\r\n        dbEndDate.value = res.result.fetchStep4AuctionPreview[0].endDate;\r\n        selectedStartDate.value = dbStartDate.value;\r\n        selectedEndDate.value = dbEndDate.value;\r\n      }\r\n      if (rs.isValid(\"FetchAllStepsAuctionPreview\")) {\r\n      } else {\r\n        rs.showErrorToast(\"FetchAllStepsAuctionPreview\");\r\n      }\r\n    });\r\n}\r\n\r\nasync function processingFeeEmdPaymentStartEndDate() {\r\n  let statusId;\r\n  const resultStatus = await fetchAuctionStatus(\"AUCTION_COMPLETED\");\r\n  if (resultStatus.error == null) {\r\n    statusId = resultStatus.result.statusId;\r\n  } else {\r\n    toaster.error(\"Oops! Please Contact Support\");\r\n  }\r\n\r\n  return new Promise((resolve) => {\r\n    new MQL()\r\n      .useManagementServer()\r\n      .setActivity(\"o.[step4UpdateDatesAndUploadDocuments]\")\r\n      .setData({\r\n        registrationStartDate: moment(selectedStartDate.value).format(\r\n          \"YYYY/MM/DD HH:mm:ss\"\r\n        ),\r\n        registrationEndDate: moment(selectedEndDate.value).format(\r\n          \"YYYY/MM/DD HH:mm:ss\"\r\n        ),\r\n        auctionId: auctionId,\r\n        statusId: statusId,\r\n      })\r\n      .fetch()\r\n      .then((rs) => {\r\n        let res = rs.getActivity(\"step4UpdateDatesAndUploadDocuments\", true);\r\n        if (rs.isValid(\"step4UpdateDatesAndUploadDocuments\")) {\r\n          console.log(\"res.result\", res.result);\r\n          resolve();\r\n        } else {\r\n          rs.showErrorToast(\"step4UpdateDatesAndUploadDocuments\");\r\n        }\r\n      });\r\n  });\r\n  // Automatically generated\r\n}\r\n\r\nasync function insertDocumentPathToDb() {\r\n  // Validate the form\r\n  return new Promise((resolve, reject) => {\r\n    new MQL()\r\n      .useManagementServer()\r\n      .setActivity(\"o.[InsertDocumentPathStep4]\")\r\n      .setData({\r\n        auctionId: auctionId,\r\n        documentsArray: documentsArray.value,\r\n      })\r\n      .fetch()\r\n      .then((rs) => {\r\n        let res = rs.getActivity(\"InsertDocumentPathStep4\", true);\r\n        if (rs.isValid(\"InsertDocumentPathStep4\")) {\r\n          resolve();\r\n        } else {\r\n          rs.showErrorToast(\"InsertDocumentPathStep4\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // Handle API call errors\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nasync function insertInWorkflow() {\r\n  var AUCTION_COMPLETED_ID;\r\n\r\n  const resultStatus = await fetchAuctionStatus(\"AUCTION_COMPLETED\");\r\n  if (resultStatus.error == null) {\r\n    AUCTION_COMPLETED_ID = resultStatus.result.statusId;\r\n  } else {\r\n    toaster.error(\"Oops! Please contact Support\");\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    console.log(AUCTION_COMPLETED_ID);\r\n\r\n    var data = {\r\n      assignedLoginId: null,\r\n      assignedRoleId: loginStore.role.roleId,\r\n      auctionId: auctionId,\r\n      comment: \"Auction Completed\",\r\n      entityId: loginStore.entityId,\r\n      loginId: loginStore.loginId,\r\n      organisationId: loginStore.organizationId,\r\n      roleId: loginStore.role.roleId,\r\n      statusId: AUCTION_COMPLETED_ID,\r\n    };\r\n    // Automatically generated\r\n    new MQL()\r\n      .setActivity(\"o.[InsertWorkflowStepDetails]\")\r\n      .useManagementServer()\r\n      .setData(data)\r\n      .fetch()\r\n      .then((rs) => {\r\n        let res = rs.getActivity(\"InsertWorkflowStepDetails\", true);\r\n        if (rs.isValid(\"InsertWorkflowStepDetails\")) {\r\n          resolve();\r\n        } else {\r\n          rs.showErrorToast(\"InsertWorkflowStepDetails\");\r\n          reject(res.error);\r\n        }\r\n      });\r\n  });\r\n}\r\n\r\nasync function onSave() {\r\n  let result = await $v.value.$validate();\r\n  console.log(\"here\", result);\r\n  if (!result) {\r\n    return;\r\n  }\r\n  console.log(\"Inside checkDates\");\r\n  if (\r\n    moment(selectedEndDate.value).isSameOrBefore(\r\n      selectedStartDate.value,\r\n      \"minute\"\r\n    )\r\n  ) {\r\n    showErrorToast();\r\n    alert(`Start Date should not be equal or after End Date !`);\r\n  } else {\r\n    await processingFeeEmdPaymentStartEndDate();\r\n    await insertDocumentPathToDb();\r\n    toaster.success(\" Data Saved !!!\");\r\n    if (config == null) {\r\n      await insertInWorkflow();\r\n    }\r\n  }\r\n  AuctionStore.$reset();\r\n  if (config != null) {\r\n    nextCallback();\r\n  } else {\r\n    router.push({ name: loginStore.role.roleCode });\r\n  }\r\n}\r\n\r\nfunction getServerDate() {\r\n  // Automatically generated\r\n  new MQL()\r\n    .useManagementServer()\r\n    .setActivity(\"o.[getServerDate]\")\r\n    .setData({})\r\n    .fetch()\r\n    .then((rs) => {\r\n      let res = rs.getActivity(\"getServerDate\", true);\r\n      serverDate.value = res.result.serverDate.currentDate;\r\n      console.log(\"serverDate-\", serverDate.value);\r\n      if (rs.isValid(\"getServerDate\")) {\r\n      } else {\r\n        rs.showErrorToast(\"getServerDate\");\r\n      }\r\n    });\r\n}\r\nfunction DownloadDocument(url) {\r\n  if (url !== \"\") {\r\n    new MQLCdn()\r\n      .setCDNPath(url)\r\n      .enablePageLoader(true)\r\n      .downloadFile(\"downloadBtn\")\r\n      .then((res) => {\r\n        if (!res.isValid()) {\r\n          res.showErrorToast();\r\n        }\r\n      });\r\n  } else {\r\n    toaster.error(\"File can'nt be downloaded!\");\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  fetchDocumentsValidationDetails();\r\n  formattedEndDateCalc();\r\n  formattedStartDateCalc();\r\n  getServerDate();\r\n});\r\nonBeforeMount(() => {\r\n  fetchAllStepsAuctionPreview();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.main-date {\r\n  font-size: large;\r\n  font: 700;\r\n}\r\n\r\n.custom-calendar .p-calendar {\r\n  width: 250px;\r\n  /* Adjust width as needed */\r\n}\r\n\r\n.custom-calendar .p-inputtext {\r\n  font-size: 16px;\r\n  /* Adjust font size as needed */\r\n  color: #333;\r\n  /* Adjust text color as needed */\r\n  padding: 0.5rem;\r\n  /* Adjust padding as needed */\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"names":["toaster","createToaster","position","duration","toast","useToast","router","useRouter","loginStore","login","AuctionStore","useAuctionPreparation","auctionId","config","__props","serverDate","ref","selectedStartDate","selectedEndDate","Vue","window","app","minDate","value","moment","add","toDate","endMinDate","AucUrl","NoticeUrl","myFile","docValidation","docName","docType","docSize","NoticeDocName","NoticeDocType","NoticeDocSize","dbEndDate","dbStartDate","docTypeId","NoticeDocTypeId","AuctionDocTypeId","documentsArray","formattedStartDate","formattedEndDate","fileName","filePath","fullPath","rules","computed","required","helpers","withMessage","$v","useVuelidate","emit","__emit","onAdvancedUpload","async","event","id","console","log","timeStamp","Date","now","files","name","formData","FormData","append","MQLCdn","enablePageLoader","setDirectoryPath","setFormData","setFileName","setBucketKey","setPurposeId","setClientId","uploadFile","then","res","isValid","uploadedFileURL","getCDNBaseURL","push","cdnServer","documentTypeId","success","showErrorToast","onSave","result","$validate","isSameOrBefore","severity","summary","detail","life","alert","statusId","resultStatus","fetchAuctionStatus","error","Promise","resolve","MQL","useManagementServer","setActivity","setData","registrationStartDate","format","registrationEndDate","fetch","rs","getActivity","processingFeeEmdPaymentStartEndDate","reject","catch","insertDocumentPathToDb","AUCTION_COMPLETED_ID","data","assignedLoginId","assignedRoleId","role","roleId","comment","entityId","loginId","organisationId","organizationId","insertInWorkflow","$reset","roleCode","DownloadDocument","url","setCDNPath","downloadFile","onMounted","useCoreServer","validation","forEach","item","typeName","fileSize","fileType","typeId","currentDate","onBeforeMount","fetchStep4AuctionPreview","length","startDate","endDate"],"mappings":"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"}