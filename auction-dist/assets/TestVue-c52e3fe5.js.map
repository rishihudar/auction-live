{"version":3,"file":"TestVue-c52e3fe5.js","sources":["../../src/views/masters/TestVue.vue"],"sourcesContent":["<!-- <template>\r\n  <div>\r\n      <label for=\"username\">Username:</label>\r\n      <input id=\"username\" v-model=\"username\" :class=\"{ 'p-invalid': $v.username.$error }\"/>\r\n      <div v-if=\"$v.username.$error\" class=\"p-error\">\r\n          {{ $v.username.$errors[0].$message }}\r\n      </div>\r\n\r\n\r\n      <button @click=\"submitForm\">Submit</button>\r\n    \r\n  </div>\r\n              \r\n</template> -->\r\n\r\n<!-- <template>\r\n  <div>\r\n    <label for=\"username\">Username:</label>\r\n    <input id=\"username\" v-model=\"username\"/>\r\n    <div v-if=\"$v.username.$error\" class=\"p-error\">\r\n      {{ $v.username.$errors[0].$message }}\r\n    </div>\r\n\r\n    <span v-for =\"error in $v.username.$errors\" :key=\"error\">{{error.$message}}</span>\r\n    <button @click=\"submitForm\">Submit</button>\r\n  </div>\r\n</template> \r\n\r\n\r\n<script setup>\r\nimport { reactive, ref } from 'vue';\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { required } from '@vuelidate/validators';\r\nimport { computed } from 'vue';\r\nimport { createToaster } from \"@meforma/vue-toaster\";\r\n\r\nconst username = reactive('');\r\nconst toaster = createToaster({ position: \"top-right\", duration: 3000 })\r\n\r\nlet rules = computed(() => ({\r\n  username: { required }\r\n}));\r\n\r\nconst $v = useVuelidate(rules,{\r\n  username\r\n});\r\n\r\nconsole.log(\"printing..............\", $v);\r\nfunction submitForm() {\r\n  if (!$v.value.username.$invalid) {\r\n    // Perform form submission logic here\r\n    console.log('Form submitted successfully');\r\n  }else {\r\n\r\ntoaster.error(\"Invalid Details\")\r\n\r\n}\r\n}\r\n</script> -->\r\n\r\n<!-- <template>\r\n  <div>\r\n    <div>\r\n      <form @submit.prevent=\"submitForm\" class=\"p-fluid\">\r\n        \r\n        Username: {{forData.username}}\r\n        <input v-model=\"forData.username\" type=\"Username\" />\r\n        Email: {{forData.email}}\r\n        <input v-model=\"forData.email\" type=\"email\" />\r\n        Password: {{forData.password}}\r\n        <input v-model=\"forData.password\" type=\"password\" />\r\n        Confirm Password: {{forData.confirmPassword}}\r\n        <input v-model=\"forData.confirmPassword\" type=\"password\" />\r\n\r\n        <button type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n    <div>\r\n      <p class=\"text-red-500\">Errors: </p>\r\n      <span v-for=\"error in $v.$errors\" :key=\"error.$uid\">\r\n        {{error.$property }} - {{ error.$message }},\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template> -->\r\n\r\n<script setup>\r\nimport { computed, reactive, ref } from 'vue';\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { required, email, minLength, sameAs } from '@vuelidate/validators';\r\n\r\nconst darkMode = ref(false);\r\nconst forData = reactive({\r\n  username: '',\r\n  email: '',\r\n  password: '',\r\n  confirmPassword: ''\r\n});\r\n\r\nconst rules = computed(() => {\r\n  return{\r\n    username: { required },\r\n    email: { required, email },\r\n    password: { required, minLength: minLength(6) },\r\n    confirmPassword: { required, sameAs: sameAs(forData.password) }\r\n  } \r\n});\r\n\r\nconst $v = useVuelidate(rules, forData);\r\nconsole.log(\"printing..............\", $v);\r\n\r\n\r\nconst submitForm = async () => {\r\n  // Your form submission logic here\r\n  const result = await $v.value.$validate();\r\n  if(result) {\r\n    alert(\"success, form submitted\");\r\n  } else {\r\n    alert(\"error, form not submitted\");\r\n  }\r\n};\r\n\r\nfunction toggleMode() {\r\n  darkMode.value = !darkMode.value;\r\n}\r\n</script>      \r\n\r\n\r\n<template>\r\n  <div :class=\"{'dark': darkMode}\" class=\"px-4 py-8\">\r\n    <div class=\"flex justify-end mb-4\">\r\n      <button @click=\"toggleMode\" class=\"px-4 py-2 bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200 rounded-full\">\r\n        {{ darkMode ? 'Day Mode' : 'Night Mode' }}\r\n      </button>\r\n    </div>\r\n    <div>\r\n      <form @submit.prevent=\"submitForm\" class=\"p-fluid\">\r\n        <div class=\"mb-4\">\r\n          <label for=\"username\">Username:</label>\r\n          <input id=\"username\" v-model=\"forData.username\" type=\"text\" class=\"input\" />\r\n          <span v-if=\"$v.username.$error\" class=\"text-red-500\">{{ $v.username.$errors[0].$message }}</span>\r\n        </div>\r\n        <div class=\"mb-4\">\r\n          <label for=\"email\">Email:</label>\r\n          <input id=\"email\" v-model=\"forData.email\" type=\"email\" class=\"input\" />\r\n          <span v-if=\"$v.email.$error\" class=\"text-red-500\">{{ $v.email.$errors[0].$message }}</span>\r\n        </div>\r\n        <div class=\"mb-4\">\r\n          <label for=\"password\">Password:</label>\r\n          <input id=\"password\" v-model=\"forData.password\" type=\"password\" class=\"input\" />\r\n          <span v-if=\"$v.password.$error\" class=\"text-red-500\">{{ $v.password.$errors[0].$message }}</span>\r\n        </div>\r\n        <div class=\"mb-4\">\r\n          <label for=\"confirmPassword\">Confirm Password:</label>\r\n          <input id=\"confirmPassword\" v-model=\"forData.confirmPassword\" type=\"password\" class=\"input\" />\r\n          <span v-if=\"$v.confirmPassword.$error\" class=\"text-red-500\">{{ $v.confirmPassword.$errors[0].$message }}</span>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n    <div>\r\n      <p class=\"text-red-500\">Errors: </p>\r\n      <span v-for=\"error in $v.$errors\" :key=\"error.$uid\">\r\n        {{error.$property }} - {{ error.$message }},\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<!-- <script setup>\r\nimport { ref } from 'vue';\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { required, email, minLength, sameAs } from '@vuelidate/validators';\r\n\r\nconst forData = ref({\r\n  username: '',\r\n  email: '',\r\n  password: '',\r\n  confirmPassword: ''\r\n});\r\n\r\nconst rules = {\r\n  forData: {\r\n    username: { required },\r\n    email: { required, email },\r\n    password: { required, minLength: minLength(6) },\r\n    confirmPassword: { required, sameAs: sameAs(forData.password) }\r\n  }\r\n};\r\n\r\nconst $v = useVuelidate(rules, forData);\r\n\r\nconst darkMode = ref(false);\r\n\r\nfunction submitForm() {\r\n  if (!$v.$invalid) {\r\n    // Perform form submission logic here\r\n    console.log('Form submitted successfully');\r\n  }\r\n}\r\n\r\nfunction toggleMode() {\r\n  darkMode.value = !darkMode.value;\r\n}\r\n</script> -->\r\n\r\n<style scoped>\r\n/* Day Mode */\r\n.light {\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n}\r\n\r\n/* Night Mode */\r\n.dark {\r\n  background-color: #333;\r\n  color: #f5f5f5;\r\n}\r\n\r\n.input {\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 0.25rem;\r\n  width: 100%;\r\n}\r\n\r\n.btn {\r\n  padding: 0.5rem 1rem;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.btn:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.btn:focus {\r\n  outline: none;\r\n}\r\n</style>\r\n"],"names":["darkMode","ref","forData","reactive","username","email","password","confirmPassword","rules","computed","required","minLength","sameAs","$v","useVuelidate","console","log","submitForm","async","value","$validate","alert","toggleMode"],"mappings":"i2BA6FM,MAAAA,EAAWC,GAAI,GACfC,EAAUC,EAAS,CACvBC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,gBAAiB,KAGbC,EAAQC,GAAS,KACf,CACJL,SAAU,CAAEM,YACZL,MAAO,CAAEK,WAAUL,SACnBC,SAAU,CAAEI,WAAUC,UAAWA,EAAU,IAC3CJ,gBAAiB,CAAEG,WAAUE,OAAQA,EAAOV,EAAQI,eAIlDO,EAAKC,EAAaN,EAAON,GACvBa,QAAAC,IAAI,yBAA0BH,GAGtC,MAAMI,EAAaC,gBAEIL,EAAGM,MAAMC,YAE5BC,MAAM,2BAENA,MAAM,4BACP,EAGH,SAASC,IACEtB,EAAAmB,OAASnB,EAASmB,KAC7B"}